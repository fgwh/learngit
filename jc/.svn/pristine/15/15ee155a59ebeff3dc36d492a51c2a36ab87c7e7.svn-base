package com.hgsoft.main.laneenlist.service;


import com.hgsoft.job.GetLaneEnListDataJob;
import com.hgsoft.job.JobLog;
import com.hgsoft.main.entity.QrtzLog;
import com.hgsoft.main.laneenlist.dao.LaneEnListDao;
import com.hgsoft.main.laneenlist.entity.LaneEnList;
import com.hgsoft.security.service.BaseService;
import com.hgsoft.util.*;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 入口流水service
 *
 * @author 郭志强
 * @time 2016/9/9 13:26
 */
@Service
public class LaneEnListService extends BaseService<LaneEnList> {
    private static Logger logger = Logger.getLogger(GetLaneEnListDataJob.class);

    // 注入dao
    @Autowired
    private LaneEnListDao laneEnListDao;

    public void saveLaneEnList(QrtzLog qrtzLog, String... date) {
        System.out.println(date[0]);
        System.out.println(date[1]);

        qrtzLog.setCreatetime(new Date());
        // 从中间库中取出数据
        List<LaneEnList> list = getLaneEnListFromOuterDatabase(date);

        try {
            int count = 0;
            // 判断list,并遍历list
            if (list != null && list.size() > 0) {
                for (LaneEnList laneEnList : list) {
                    Connection connection = null;
                    Connection connection1 = null;

                    try {
                        Timestamp enTime = laneEnList.getEnTime();
                        // 截取入口时间年份
                        String y = DateUtil.format(enTime, "yyyy");
//                        String year = date.substring(0, 4);
                        // 保存到本地库 (用jdbc)
                        connection = LocalDBUtils.getConnection();
                        JDBCFrameForLaneExOrEnList jf =
                                new JDBCFrameForLaneExOrEnList(connection);
                        connection.setAutoCommit(false);
                        // 拼接sql语句
                        StringBuilder sb = new StringBuilder();
                        sb.append("INSERT INTO tb_LaneEnList_");
                        // 这里需要改成year
                        sb.append(y);
                        sb.append("(EnRecordNo,LaneEnSerialNo,CardNetRoadID,ICInCardID,EnNetRoadID,EnRoadID,EnStationID,EnLaneID,EnLaneType,EnTime,EnOperatorID,EnOpCardNo,EnOpCardID,EnShiftID,EnCPCSnNo,EnCPCInID,EnVehicleClass,EnVehicleStatus,EnVehiclePlate,EnVehIdentifyPlate,EnVehicleFlag,EnICCIssuer,EnCPUCardSnNo,EnCPUCardID,EnCPUCardType,EnETCTermCode,EnOBUNum,EnETCTradNo,EnETCTermTradNo,EnETCTac,SquadDate,ImageSerialNo,CardBoxNo,CardTrunkNo,AppVer,DealStatus,DeviceStatus,RecordType,VehCount,TicketType,ListName,BillNo,VoidSerialNo,VerifyCode,CPCCurrentVol,Spare1,Spare2,Spare3,Spare4,UploadTime)");
                        sb.append(" VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        // 打印出sql语句
                        System.out.println(sb.toString());
                        List<Object> params = new ArrayList<Object>();
                        // 封装参数
                        LaneEnAndExUtils.encapsulationLanEnParams(laneEnList, params);
                        boolean b = jf.updateByPreparedStatement(sb.toString(), params);

                        if (!b) {
                            throw new Exception("没有需要保存的数据");
                        } else {
                            // 保存成功方可在中间库中删除这条数据
                            connection1 = DBUtil.getConnection();
                            JDBCFrame jdbcFrame = new JDBCFrame(connection1);
                            connection1.setAutoCommit(false);
                            List<Object> objects = new ArrayList<Object>();
                            objects.add(laneEnList.getLaneEnSerialNo());
                            jdbcFrame.updateByPreparedStatement("DELETE FROM tb_LaneEnList_Mid WHERE LaneEnSerialNo=?", objects);
                        }

                        count++;
                        System.out.println(count);
                        connection.commit();
                        connection1.commit();
                    } catch (Exception e) {
                        e.printStackTrace();
                        // 事务回滚
                        if (connection != null) {
                            connection.rollback();
                        }

                        if (connection1 != null) {
                            connection1.rollback();
                        }
                    } finally {
                        // 关闭连接
                        if (connection1 != null) {
                            connection1.close();
                        }

                        if (connection != null) {
                            connection.close();
                        }
                    }
                }
            }
            logger.info("["+date[0]+"]"+"-"+"["+date[1] +"]" + "的" + count + "条入口流水数据保存到本地数据库成功。");
            qrtzLog.setDescription("["+date[0]+"]"+"-"+"["+date[1] +"]"+ "的" + count + "条入口流水数据保存到本地数据库成功。");
            qrtzLog.setJobStatus(JobLog.JOB_STATUS_SUCC);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("入口流水数据保存到本地数据库失败。");
            qrtzLog.setDescription("["+date[0]+"]"+"-"+"["+date[1] +"]" + "入口的流水数据保存到本地数据库失败。");
            qrtzLog.setJobStatus(JobLog.JOB_STATUS_FAIL);
        }

    }

    /**
     * @param date
     */
    private List<LaneEnList> getLaneEnListFromOuterDatabase(String... date) {
        // 用jdbcFrame取数据
        JDBCFrame jdbcFrame = new JDBCFrame(DBUtil.getConnection());
        // 编写sql语句
        String sql = "SELECT EnRecordNo as enRecordNo\n" +
                "      ,LaneEnSerialNo as laneEnSerialNo\n" +
                "      ,CardNetRoadID as cardNetRoadId\n" +
                "      ,ICInCardID as icinCardId\n" +
                "      ,EnNetRoadID as enNetRoadId\n" +
                "      ,EnRoadID as enRoadId\n" +
                "      ,EnStationID as enStationId\n" +
                "      ,EnLaneID as enLaneId\n" +
                "      ,EnLaneType as enLaneType\n" +
                "      ,EnTime as enTime\n" +
                "      ,EnOperatorID as enOperatorId\n" +
                "      ,EnOpCardNo as enOpCardNo\n" +
                "      ,EnOpCardID as enOpCardId\n" +
                "      ,EnShiftID as enShiftId\n" +
                "      ,EnCPCSnNo as enCpcsnNo\n" +
                "      ,EnCPCInID as enCpcinId\n" +
                "      ,EnVehicleClass as enVehicleClass\n" +
                "      ,EnVehicleStatus as enVehicleStatus\n" +
                "      ,EnVehiclePlate as enVehiclePlate\n" +
                "      ,EnVehIdentifyPlate as enVehIdentifyPlate\n" +
                "      ,EnVehicleFlag as enVehicleFlag\n" +
                "      ,EnICCIssuer as enIccissuer\n" +
                "      ,EnCPUCardSnNo as enCpucardSnNo\n" +
                "      ,EnCPUCardID as enCpucardId\n" +
                "      ,EnCPUCardType as enCpucardType\n" +
                "      ,EnETCTermCode as enEtctermCode\n" +
                "      ,EnOBUNum as enObunum\n" +
                "      ,EnETCTradNo as enEtctradNo\n" +
                "      ,EnETCTermTradNo as enEtctermTradNo\n" +
                "      ,EnETCTac as enEtctac\n" +
                "      ,SquadDate as squadDate\n" +
                "      ,ImageSerialNo as imageSerialNo\n" +
                "      ,CardBoxNo as cardBoxNo\n" +
                "      ,CardTrunkNo as cardTrunkNo\n" +
                "      ,AppVer as appVer\n" +
                "      ,DealStatus as dealStatus\n" +
                "      ,DeviceStatus as deviceStatus\n" +
                "      ,RecordType as recordType\n" +
                "      ,VehCount as vehCount\n" +
                "      ,TicketType as ticketType\n" +
                "      ,ListName as listName\n" +
                "      ,BillNo as billNo\n" +
                "      ,VoidSerialNo as voidSerialNo\n" +
                "      ,VerifyCode as verifyCode\n" +
                "      ,CPCCurrentVol as cpccurrentVol\n" +
                "      ,Spare1 as spare1\n" +
                "      ,Spare2 as spare2\n" +
                "      ,Spare3 as spare3\n" +
                "      ,Spare4 as spare4\n" +
                "      ,UploadTime as uploadTime\n" +
                "  FROM tb_LaneEnList_Mid ";
        List<Object> params = null;
        // 根据天数查询
        sql += " WHERE CONVERT(VARCHAR(100), UploadTime, 120) > ? AND CONVERT(VARCHAR(100), UploadTime, 120) < ?";
        params = new ArrayList<Object>();
        params.add(date[0]);
        params.add(date[1]);
        List<LaneEnList> laneEnLists = null;
        try {
            laneEnLists = jdbcFrame.findMoreRefResult(sql, params, LaneEnList.class);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            jdbcFrame.releaseConn();
        }

        return laneEnLists;
    }

}
