
package com.hgsoft.main.statisticsAnalysis.service;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.hgsoft.main.statisticsAnalysis.dao.LiushuiStatisticsDAO;
import com.hgsoft.main.statisticsAnalysis.entity.Condition;
import com.hgsoft.main.statisticsAnalysis.entity.TrafficFlow;
import com.hgsoft.security.dao.BaseDao;
import com.hgsoft.security.service.BaseService;


/** 
  * @author  dje 
  * @date    创建时间：2016年9月13日 下午3:26:41   
  */
@Service
public class TrafficFlowStatisticalService extends BaseService<TrafficFlow>{
	
	@Resource
	public void setDao(LiushuiStatisticsDAO dao) {
		// TODO Auto-generated method stub
		super.setDao(dao);
	}
	
	public LiushuiStatisticsDAO getLiushuiStatisticsDAO(){
		return (LiushuiStatisticsDAO)this.getDao();
	}
	
	/**
	 * 获取交通流量统计数据
	 * @param condition
	 * @return
	 * @throws Exception 
	 */
	public TrafficFlow getTrafficFlowListStatistics(Condition condition) throws Exception {
		TrafficFlow trafficFlow = new TrafficFlow();
		if (null != condition.getEnExFlag() && "1".equals(condition.getEnExFlag())) {
			trafficFlow = getLiushuiStatisticsDAO().getTrafficFlowByExStatistics(condition);
		} else if (null != condition.getEnExFlag() && "2".equals(condition.getEnExFlag())) {
			trafficFlow = getLiushuiStatisticsDAO().getTrafficFlowByEnStatistics(condition);
		} else {
			trafficFlow = (TrafficFlow) copy(getLiushuiStatisticsDAO().getTrafficFlowByExStatistics(condition),
					getLiushuiStatisticsDAO().getTrafficFlowByEnStatistics(condition));
		}
		return trafficFlow;
	}
	
	
	/**
	 * 把第二个对象的属性复制到第一个对象上
	 * @param o1
	 * @param o2
	 * @return
	 * @throws Exception
	 */
	static Object copy(Object o1, Object o2) throws Exception {
        Field[] field = o1.getClass().getDeclaredFields();
        Method[] mm = o1.getClass().getDeclaredMethods();
        for(int j=0 ; j<field.length ; j++){
            String name = field[j].getName();    
            String type = field[j].getGenericType().toString();    
            if(type.equals("class java.lang.String")){   
                Method m = o1.getClass().getMethod("get"+toUpperCaseFirstOne(name));
                String value = (String) m.invoke(o1);
                String value2 = (String) m.invoke(o2);
                if(value == null && value2!=null){
                    m = o1.getClass().getMethod("set"+toUpperCaseFirstOne(name), String.class);
                    m.invoke(o1, value2);
                }
            } else if("int".equals(type)) {
                Method m = o1.getClass().getMethod("get"+toUpperCaseFirstOne(name));
                Integer value = (Integer) m.invoke(o1);    
                Integer value2 = (Integer) m.invoke(o2);   
                if(value == null){
                    m = o1.getClass().getMethod("set"+toUpperCaseFirstOne(name), Integer.class);
                    m.invoke(o1, value+value2);
                }
            }
        }
        return o1;
    }
	
	/** 
     * 首字母转大写 
     * @param s 
     * @return 
     */  
    public static String toUpperCaseFirstOne(String s)  
    {  
        if(Character.isUpperCase(s.charAt(0)))  
            return s;  
        else  
            return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();  
    }  
}

