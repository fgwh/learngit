package com.hgsoft.main.jcManange.service;




import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.hgsoft.main.jcManange.dao.BlackListDao;
import com.hgsoft.main.jcManange.entity.Conditions;
import com.hgsoft.main.jcManange.entity.RoBlackList;
import com.hgsoft.security.service.BaseService;
import com.hgsoft.util.Pager;
@Service
@SuppressWarnings({ "rawtypes" })
public class BlackListService extends BaseService<RoBlackList>{
	
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	
	@Resource
	public EvidenceService evidenceService;
	
	
	@Resource
	public void setDao(BlackListDao blackListDao) {
		super.setDao(blackListDao);
	}

	public BlackListDao getBlackListDao() {
		return (BlackListDao) this.getDao();
	}

	
	
	@SuppressWarnings("unchecked")
	public List<Object[]> queryAllMessageList(Pager pager,Conditions conditions,String[] selectName,String sqlName,Class clazz) {		
						
		List<Object[]> list = getDao().findByNamedQuery(pager, sqlName, selectName,conditions.toArray(selectName),clazz,"new");
			
		return list;
	}
	
	
	
	public boolean saveRoBlackList(RoBlackList entity){	
		
		entity.setId(UUID.randomUUID().toString().trim().replaceAll("-", ""));
		
		if("".equals(entity.getVehPlate())||entity.getVehPlate()==null){
			entity.setVehPlate((entity.getPlateNum()+entity.getCarNo()).toUpperCase());
		}else{
			entity.setVehPlate(entity.getVehPlate().toUpperCase());
		}
		
		if(entity.getFile()!=null){
			Date uploadTime = new Date();
			
			entity.setUploadTime(uploadTime);		
			
			String fileName=evidenceService.rename(entity.getFileFileName(), uploadTime);
			
			entity.setFileName(fileName);
			
			evidenceService.saveFile(fileName, entity.getFile(), 0, entity.getId(),uploadTime);
			
		}												
				
		entity.setSource(0);
		
		entity.setJfStatus(0);		
		
		getBlackListDao().save(entity);
		
		return  true;
	}

	 public String plateValidate(Conditions condition){
		 
		return  getBlackListDao().plateValidate(condition);
		 
	 }
	 //费用追缴
	 public void recovered(RoBlackList entity){	

			if(entity.getFile()!=null){
				Date uploadTime = new Date();
										
				String fileName=evidenceService.rename(entity.getFileFileName(), uploadTime);
								
				evidenceService.saveFile(fileName, entity.getFile(), 1, entity.getId(),uploadTime);	
				
				getBlackListDao().recovered(entity.getId());
				
			}	
		 
		}
	 
	 
	//上传证据链 0代表证据链 1代表追缴证据
	 
	public void upload(RoBlackList entity){
		if(entity.getFile()!=null){
			Date uploadTime = new Date();
							
			String fileName=evidenceService.rename(entity.getFileFileName(), uploadTime);
						
			evidenceService.saveFile(fileName, entity.getFile(), 0, entity.getId(),uploadTime);
			
			getBlackListDao().upload(entity.getId(),fileName,sdf.format(uploadTime));			
		}	
				
	}
}
